# -*- coding: utf-8 -*-
"""Team_4_Augment_DNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/caplove/DX_team_4_repo/blob/main/Team_4_Augment_DNN_MLP_Tree_Knn_Ensemble2.ipynb

# **데이터 가져오기**

---
"""

#!git clone https://github.com/caplove/DX_team_4_repo.git

#과제 설명
from IPython.display import Image
#Image('./image/image_01.png',width=800,height=600)

#Image('./image/image_02.jpg',width=800,height=700)

#Image('./image/image_03.jpg',width=800,height=700)

#Image('./image/image_05.jpg',width=800,height=700)

# Commented out IPython magic to ensure Python compatibility.
"""입출력"""
import os

"""전처리"""
import pandas as pd
import numpy as np
pd.set_option('display.max_columns', None)

from scipy.interpolate import CubicSpline      # for Data Augmentation
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

"""시각화"""
import matplotlib.pyplot as plt
import matplotlib
plt.style.use('seaborn-whitegrid')
import seaborn as sns
#sns.set_style("white")
import itertools
# %matplotlib inline

import warnings
warnings.filterwarnings(action='ignore')

"""## 데이터 프레임"""

# 하위 폴더내에 각각 파일이 있고, 파일(폴더)명에 class 정보가 있을경우 
# 참조 : https://wikidocs.net/39

df=[]
df = pd.DataFrame()


#for (path, dir, files) in os.walk("./Data/"):
for (path, dir, files) in os.walk(".DX_team_4_repo/Data/"):
                
        for filename in files:
             ext = os.path.splitext(filename)[-1]  # 확장자가 txt 이면...
             if ext == '.txt':
       
                # 해당파일을 DataFrame으로 읽고 class 추가하기
                print(path + '/' + filename)

                data = pd.read_csv(path + '/'+filename,sep='[:, ,]',names=['ID','accx','accy','accz','gyrx','gyry','gyrz','current','NaN'],header=None,index_col=None)
                data = data.drop(['ID','NaN'],axis=1)     # 다수의 sep는 [ A구분자,B구분자 ] 사용
    
                #Class 컬럼추가 (파일명에서  . 앞에 문자열 추출
                class_name = filename.split('.')[0]     
                data.loc[:,'CLASS']=np.array([class_name]*len(data))    

                #모든 Class 데이터 누적 합치기
                df = pd.concat([df,data])

"""## x,y 정의"""

""" 설명 변수 및 반응변수 구분 """
x = df.drop(['CLASS'],axis=1)
y = df['CLASS']
